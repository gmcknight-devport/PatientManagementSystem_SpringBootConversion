package com.gmck.PatientManagementSystem.Views;

import java.awt.event.ActionListener;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;

public class SecretaryView extends JFrame {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -6208110784712887498L;
	/**
     * Creates new form SecretaryGUI
     */
    public SecretaryView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    	titleJLabel = new javax.swing.JLabel();
    	messagesTable = new JTable();
        logoutJButton = new javax.swing.JButton();
        backgroundJTabbedPane = new javax.swing.JTabbedPane();
        homeJPanel = new javax.swing.JPanel();
        welcomeJLabel = new javax.swing.JLabel();
        userInfoJText = new javax.swing.JTextArea();
        detailsJLabel = new javax.swing.JLabel();
        messagesJLabel = new javax.swing.JLabel();   
        jScrollPane6 = new javax.swing.JScrollPane(); 
        deleteMessageJButton = new javax.swing.JButton();
        accountJPanel = new javax.swing.JPanel();
        requesedAccountJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        creationJList = new javax.swing.JList<>();
        approveCreationJButton = new javax.swing.JButton();
        declineCreationJButton = new javax.swing.JButton();
        removePatientJLabel = new javax.swing.JLabel();
        removePatientJCombo = new javax.swing.JComboBox<>();
        removeAccountJButton = new javax.swing.JButton();
        medicinesJPanel = new javax.swing.JPanel();
        medicinesJLabel = new javax.swing.JLabel();
        medicinePatientJCombo = new javax.swing.JComboBox<>();
        medicinePatientIDJLabel = new javax.swing.JLabel();
        medicineQuantityJLabel = new javax.swing.JLabel();
        medicineQuantityJSpinner = new javax.swing.JSpinner();
        orderJButton = new javax.swing.JButton();
        giveMedicineJButton = new javax.swing.JButton();
        deleteMedicineJButton = new javax.swing.JButton();
        JScrollPane jScrollPane5 = new javax.swing.JScrollPane();
        medicinesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleJLabel.setText("Indisposed Clinic");

        logoutJButton.setText("Log Out");

        welcomeJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        welcomeJLabel.setText("Welcome Back!");

        userInfoJText.setEditable(false);
        userInfoJText.setColumns(20);
        userInfoJText.setRows(5);
        userInfoJText.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        detailsJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        detailsJLabel.setText("Your details:");

        messagesJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        messagesJLabel.setText("Messages");

        deleteMessageJButton.setText("Delete Message");

        messagesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", "", ""},
                {"", "", "", ""},
                {"", "", "", ""},
                {"", "", "", ""}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(messagesTable);

        javax.swing.GroupLayout homeJPanelLayout = new javax.swing.GroupLayout(homeJPanel);
        homeJPanel.setLayout(homeJPanelLayout);
        homeJPanelLayout.setHorizontalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homeJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(welcomeJLabel))
                    .addGroup(homeJPanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteMessageJButton)
                            .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(userInfoJText, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                                .addComponent(detailsJLabel)
                                .addComponent(messagesJLabel)
                                .addComponent(jScrollPane6)))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        homeJPanelLayout.setVerticalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeJLabel)
                .addGap(52, 52, 52)
                .addComponent(detailsJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userInfoJText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messagesJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteMessageJButton)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Home", homeJPanel);

        requesedAccountJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        requesedAccountJLabel.setText("Account Creation Requests");

        jScrollPane1.setViewportView(creationJList);

        approveCreationJButton.setText("Approve");

        declineCreationJButton.setText("Decline");

        removePatientJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        removePatientJLabel.setText("Remove Patients");

        removeAccountJButton.setText("Remove");

        javax.swing.GroupLayout accountJPanelLayout = new javax.swing.GroupLayout(accountJPanel);
        accountJPanel.setLayout(accountJPanelLayout);
        accountJPanelLayout.setHorizontalGroup(
            accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountJPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountJPanelLayout.createSequentialGroup()
                        .addComponent(removePatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeAccountJButton))
                    .addComponent(removePatientJLabel)
                    .addComponent(requesedAccountJLabel)
                    .addGroup(accountJPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(approveCreationJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(declineCreationJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        accountJPanelLayout.setVerticalGroup(
            accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(requesedAccountJLabel)
                .addGap(12, 12, 12)
                .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountJPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(approveCreationJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(declineCreationJButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(removePatientJLabel)
                .addGap(18, 18, 18)
                .addGroup(accountJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removePatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeAccountJButton))
                .addContainerGap(208, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Accounts", accountJPanel);

        medicinesJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        medicinesJLabel.setText("Medicines");

        medicinePatientIDJLabel.setText("Patient ID");

        medicineQuantityJLabel.setText("Medicine Quantity");

        medicineQuantityJSpinner.setModel(new javax.swing.SpinnerNumberModel());

        orderJButton.setText("Order Medicine");

        giveMedicineJButton.setText("Give Medicine");
        giveMedicineJButton.setActionCommand("");

        deleteMedicineJButton.setText("Delete Medicine");
        deleteMedicineJButton.setActionCommand("");

        medicinesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(medicinesTable);
        
        medicineDoctorJCombo = new JComboBox<String>();
        
        JLabel medicineDoctorIDJLabel = new JLabel();
        medicineDoctorIDJLabel.setText("Doctor ID");

        javax.swing.GroupLayout medicinesJPanelLayout = new javax.swing.GroupLayout(medicinesJPanel);
        medicinesJPanelLayout.setHorizontalGroup(
        	medicinesJPanelLayout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(medicinesJPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane5, GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(orderJButton)
        						.addGroup(medicinesJPanelLayout.createSequentialGroup()
        							.addComponent(medicineQuantityJLabel)
        							.addGap(130)
        							.addComponent(medicineQuantityJSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        					.addPreferredGap(ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
        					.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.TRAILING, false)
        						.addGroup(medicinesJPanelLayout.createSequentialGroup()
        							.addComponent(medicinePatientIDJLabel)
        							.addGap(99)
        							.addComponent(medicinePatientJCombo, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE))
        						.addGroup(medicinesJPanelLayout.createSequentialGroup()
        							.addComponent(medicineDoctorIDJLabel, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        							.addComponent(medicineDoctorJCombo, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE))))
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addComponent(medicinesJLabel)
        					.addGap(0, 575, Short.MAX_VALUE))
        				.addGroup(Alignment.TRAILING, medicinesJPanelLayout.createParallelGroup(Alignment.LEADING, false)
        					.addComponent(deleteMedicineJButton, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(giveMedicineJButton, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)))
        			.addContainerGap())
        );
        medicinesJPanelLayout.setVerticalGroup(
        	medicinesJPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(medicinesJPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(medicinesJLabel)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jScrollPane5, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(medicineQuantityJLabel)
        				.addComponent(medicineQuantityJSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(medicinePatientJCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(medicinePatientIDJLabel))
        			.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addGap(26)
        					.addComponent(orderJButton))
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(medicineDoctorJCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(medicineDoctorIDJLabel))))
        			.addGap(4)
        			.addComponent(giveMedicineJButton)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(deleteMedicineJButton)
        			.addContainerGap(55, Short.MAX_VALUE))
        );
        medicinesJPanel.setLayout(medicinesJPanelLayout);

        backgroundJTabbedPane.addTab("Medicines", medicinesJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap(266, Short.MAX_VALUE)
        			.addComponent(titleJLabel)
        			.addGap(153)
        			.addComponent(logoutJButton)
        			.addContainerGap())
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(backgroundJTabbedPane, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(titleJLabel, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(logoutJButton, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(backgroundJTabbedPane, GroupLayout.PREFERRED_SIZE, 402, GroupLayout.PREFERRED_SIZE)
        			.addGap(49))
        );
        getContentPane().setLayout(layout);
        appointmentRequestsTable = new JTable();
        appointmentRequestsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        deleteAppointmentsTable = new JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        deleteAppointmentJLabel = new javax.swing.JLabel();
        appointmentJPanel = new javax.swing.JPanel();
        appointmentRequestJLabel = new javax.swing.JLabel();
        setAppointmentJLabel = new javax.swing.JLabel();
        appointmentDateJSpinner = new javax.swing.JSpinner();
        appointmentDateJLabel = new javax.swing.JLabel();
        appointmentTimeJLabel = new javax.swing.JLabel();
        appointmentDOctorJLabel = new javax.swing.JLabel();
        appointmentPatientJLabel = new javax.swing.JLabel();
        appointmentTimeJCombo = new javax.swing.JComboBox<>();
        appointmentDoctorJCombo = new javax.swing.JComboBox<>();
        appointmentPatientJCombo = new javax.swing.JComboBox<>();
        createAppointmentJButton = new javax.swing.JButton();
        approveAppointmentJButton = new javax.swing.JButton();
        declineAppointmentJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        
    appointmentRequestJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    appointmentRequestJLabel.setText("Appointment requests");
    
    setAppointmentJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    setAppointmentJLabel.setText("Appointment Setting");
    
    appointmentDateJSpinner.setModel(new javax.swing.SpinnerDateModel());
    
    appointmentDateJLabel.setText("Appointment date:");
    
    appointmentTimeJLabel.setText("Appointment time:");
    
    appointmentDOctorJLabel.setText("Doctor:");
                    
    appointmentPatientJLabel.setText("Patient:");
    
    createAppointmentJButton.setText("Create Appointment");
            
    approveAppointmentJButton.setText("Approve Appointment");
                                                            
    declineAppointmentJButton.setText("Decline Appointment");
    deleteAppointmentJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    deleteAppointmentJLabel.setText("Delete Appointments");
    
    appointmentRequestsTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
    ));
                                                                            
    deleteAppointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
    
    jScrollPane2.setViewportView(appointmentRequestsTable);
    jScrollPane11.setViewportView(deleteAppointmentsTable);
    
    deleteAppointmentButton = new JButton("Delete Appointment");
                                                                                    
    appointDeletePatJCombo = new JComboBox<String>();

    javax.swing.GroupLayout appointmentJPanelLayout = new javax.swing.GroupLayout(appointmentJPanel);
    appointmentJPanelLayout.setHorizontalGroup(
    	appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    		.addGroup(appointmentJPanelLayout.createSequentialGroup()
    			.addContainerGap()
    			.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    				.addComponent(setAppointmentJLabel)
    				.addComponent(appointmentRequestJLabel)
    				.addGroup(appointmentJPanelLayout.createSequentialGroup()
    					.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING, false)
    						.addComponent(deleteAppointmentJLabel)
    						.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    						.addComponent(jScrollPane11, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
    					.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    						.addGroup(appointmentJPanelLayout.createSequentialGroup()
    							.addGap(17)
    							.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    								.addComponent(approveAppointmentJButton, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
    								.addComponent(declineAppointmentJButton, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
    								.addComponent(deleteAppointmentButton, GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
    						.addGroup(appointmentJPanelLayout.createSequentialGroup()
    							.addGap(18)
    							.addComponent(appointDeletePatJCombo, 0, 169, Short.MAX_VALUE))))
    				.addGroup(Alignment.TRAILING, appointmentJPanelLayout.createSequentialGroup()
    					.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    						.addGroup(appointmentJPanelLayout.createSequentialGroup()
    							.addComponent(appointmentDateJLabel)
    							.addGap(52)
    							.addComponent(appointmentDateJSpinner, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
    						.addGroup(appointmentJPanelLayout.createSequentialGroup()
    							.addComponent(appointmentTimeJLabel)
    							.addGap(52)
    							.addComponent(appointmentTimeJCombo, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)))
    					.addPreferredGap(ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
    					.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING, false)
    						.addGroup(appointmentJPanelLayout.createSequentialGroup()
    							.addComponent(appointmentPatientJLabel)
    							.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    							.addComponent(appointmentPatientJCombo, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
    						.addGroup(appointmentJPanelLayout.createSequentialGroup()
    							.addComponent(appointmentDOctorJLabel)
    							.addPreferredGap(ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
    							.addComponent(appointmentDoctorJCombo, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))))
    				.addComponent(createAppointmentJButton, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 222, GroupLayout.PREFERRED_SIZE))
    			.addContainerGap())
    );
    appointmentJPanelLayout.setVerticalGroup(
    	appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    		.addGroup(appointmentJPanelLayout.createSequentialGroup()
    			.addGap(12)
    			.addComponent(appointmentRequestJLabel)
    			.addPreferredGap(ComponentPlacement.RELATED)
    			.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.TRAILING)
    				.addGroup(appointmentJPanelLayout.createSequentialGroup()
    					.addComponent(approveAppointmentJButton)
    					.addGap(18)
    					.addComponent(declineAppointmentJButton)
    					.addGap(21))
    				.addGroup(appointmentJPanelLayout.createSequentialGroup()
    					.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
    					.addPreferredGap(ComponentPlacement.RELATED)))
    			.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    				.addGroup(appointmentJPanelLayout.createSequentialGroup()
    					.addComponent(deleteAppointmentJLabel)
    					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    					.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.BASELINE)
    						.addComponent(jScrollPane11, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
    						.addComponent(appointDeletePatJCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
    					.addPreferredGap(ComponentPlacement.RELATED)
    					.addComponent(setAppointmentJLabel))
    				.addGroup(appointmentJPanelLayout.createSequentialGroup()
    					.addGap(70)
    					.addComponent(deleteAppointmentButton)))
    			.addPreferredGap(ComponentPlacement.RELATED)
    			.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.BASELINE)
    				.addComponent(appointmentDateJLabel)
    				.addComponent(appointmentDateJSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    				.addComponent(appointmentDoctorJCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    				.addComponent(appointmentDOctorJLabel))
    			.addGap(2)
    			.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.LEADING)
    				.addGroup(Alignment.TRAILING, appointmentJPanelLayout.createParallelGroup(Alignment.BASELINE)
    					.addComponent(appointmentPatientJCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    					.addComponent(appointmentPatientJLabel))
    				.addGroup(appointmentJPanelLayout.createParallelGroup(Alignment.BASELINE)
    					.addComponent(appointmentTimeJCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    					.addComponent(appointmentTimeJLabel)))
    			.addPreferredGap(ComponentPlacement.RELATED)
    			.addComponent(createAppointmentJButton)
    			.addGap(17))
    );
    appointmentJPanel.setLayout(appointmentJPanelLayout);
    appointmentJPanel.setLayout(appointmentJPanelLayout);
    
    backgroundJTabbedPane.addTab("Appointments", appointmentJPanel);

    pack();
    }// </editor-fold>   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecretaryView().setVisible(true);
            }
        });
    }
    /**
     * Displays a JOptionPane to provide information to the user when required. 
     * @param message to be displayed.
     */
    public void displayMessage(String message){
        JOptionPane.showMessageDialog(this, message);
    }
    /**
     * Set the messages the user has received to the messageTable.
     * @param messages of user to be displayed.
     */
    public void setUserMessages(String[] colNames, String[][] messages){
    	DefaultTableModel model = new DefaultTableModel(messages, colNames);
    	messagesTable.setModel(model);
    }
    /**
     * Register button handler for delete message button.
     * @param controller to respond to event.
     */
    public void addDeleteMessageButtonHandler(ActionListener controller){
        deleteMessageJButton.addActionListener(controller);
    }
    /**
     * Get the index of the selected message to be deleted.
     * @return 
     */
    public String getMessageToDelete(){
        int row = messagesTable.getSelectedRow();
        return messagesTable.getModel().getValueAt(row, 0).toString();
    } 
    /**
     * Register button handler to respond to logout button.
     * @param controller to respond to event.
     */
    public void addLogoutButtonHandler(ActionListener controller){
        logoutJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to approve account button.
     * @param controller to respond to event.
     */
    public void addApproveAccountButtonHandler(ActionListener controller){
        approveCreationJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to decline account button.
     * @param controller to respond to event.
     */
    public void addDeclineAccountButtonHandler(ActionListener controller){
        declineCreationJButton.addActionListener(controller);
    }
        /**
     * Register button handler to respond to remove account button.
     * @param controller to respond to event.
     */
    public void addRemoveAccountButtonHandler(ActionListener controller){
        removeAccountJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to approve appointment button.
     * @param controller to respond to event.
     */
    public void addApproveAppointmentButtonHandler(ActionListener controller){
        approveAppointmentJButton.addActionListener(controller);
    }
    /**
     * Register selection handler to respond when new item selected in patCombo.
     * @param controller to respond to event.
     */
    public void addAppointmentPatIdChangeHandler(ActionListener controller) {
    	appointDeletePatJCombo.addActionListener(controller);
    }
    
    /**
     * Register button handler for decline appointment button.
     * @param controller to respond to event.
     */
    public void addDeclineAppointmentButtonHandler(ActionListener controller){
        declineAppointmentJButton.addActionListener(controller);
    }
    
    /**
     * Register button handler to respond to create appointment button.
     * @param controller to respond to event.
     */
    public void addCreateAppointmentButtonHandler(ActionListener controller){
        createAppointmentJButton.addActionListener(controller);
    }
    
    public void addDeleteAppointmentButtonHandler(ActionListener controller){
        deleteAppointmentButton.addActionListener(controller);
    }
    
    /**
     * Register button handler to respond to order medicine button.
     * @param controller to respond to event.
     */
    public void addOrderMedicineButtonHandler(ActionListener controller){
        orderJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to delete medicine button.
     * @param controller to respond to event.
     */
    public void addDeleteMedicineButtonHandler(ActionListener controller){
        deleteMedicineJButton.addActionListener(controller);
    }
    /**
     * Register button handler to respond to prescribe medicine button.
     * @param controller to respond to event.
     */
    public void addPrescribeMedicineButtonHandler(ActionListener controller){
        giveMedicineJButton.addActionListener(controller);
    }
    /**
     * Display patient's to be removed form the system.
     * @param tempPat list of patients
     */
    public void setRemoveJCombo(List<String> tempPat){
        removePatientJCombo.removeAllItems();
        
        for(String s : tempPat){
            removePatientJCombo.addItem(s);
        } 
    }
    /**
     * Get selected patient to be deleted.
     * @return patient.
     */
    public String getDeletePatientValue(){
        return removePatientJCombo.getSelectedItem().toString();
    }
    /**
     * Display list of account creation requests.
     * @param requests to be set.
     */
    public void setCreationJList(String[] requests){
        creationJList.setListData(requests);
    }
    /**
     * Sets text box with logged in user information.
     * @param info about logged in user.
     */
    public void setSecInfoText(String info){
        userInfoJText.setText(info);
    }
    /**
     * Gets index of account selected for creation.
     * @return account index.
     */
    public int getCreationSelectedIndex(){
        return creationJList.getSelectedIndex();
    }
    /**
     * Gets value of the user account to be created.
     * @return patient account to be created.
     */
    public String getCreationSelectedValue(){
        return creationJList.getSelectedValue();
    }
    /**
     * Display data of accounts that have been requested by patient and require 
     * approval.
     * @param appointments to be approved.
     */
    public void setAppointmentApprovalRequests(String[] colNames, String[][] appointments){
    	DefaultTableModel model = new DefaultTableModel(appointments, colNames);
    	appointmentRequestsTable.setModel(model);
    	
    	//Hide ID column - not needed for user but useful to minimise excessive code to
    	//find Appointment records.
    	appointmentRequestsTable.removeColumn(appointmentRequestsTable.getColumn(colNames[0]));
    }
        
    public void setDeleteAppointments(String[] colNames, String[][] appointments){
    	DefaultTableModel model = new DefaultTableModel(appointments, colNames);
    	deleteAppointmentsTable.setModel(model);
    	
    	//Hide ID column - not needed for user but useful to minimise excessive code to
    	//find Appointment records.
    	deleteAppointmentsTable.removeColumn(deleteAppointmentsTable.getColumn(colNames[0]));
    }
    
    /**
     * Sets format of date spinner to local date to avoid confusion between 
     * different potential date formats.
     */
    public void setAppointmentDateSpinnerFormat(){
        
        try{
			SimpleDateFormat format;
            format = ((JSpinner.DateEditor) appointmentDateJSpinner.getEditor()).getFormat();
            format.applyPattern("dd/MM/yy");
            appointmentDateJSpinner.commitEdit();
            
        } catch(Exception ex){
            displayMessage("Appointment booking date format error");
            System.out.println(ex);
        }
    }
    /**
     * Fills JComboBox with possible appointment times.
     * @param times to be set.
     */
    public void setAppointmentTimeCombo(List<String> times){
        times.forEach((s) -> {
            appointmentTimeJCombo.addItem(s);
        });
    }
    /**
     * Fills doctor JCombo with doctorIDs of those available for appointments.
     * @param doctorIDs 
     */
    public void setDoctorCombo(List<String> doctorIDs){
        doctorIDs.forEach((s) -> {
            appointmentDoctorJCombo.addItem(s);
            medicineDoctorJCombo.addItem(s);
        });
    }
    /**
     * Set the data in the patient JCombos. 
     * @param patientIDs list of patIDs to be displayed.
     */  
    public void setPatientCombos(List<String> patientIDs){
    	//Remove any previous values
    	appointmentPatientJCombo.removeAllItems();
    	medicinePatientJCombo.removeAllItems();
        appointDeletePatJCombo.removeAllItems();
        
        patientIDs.forEach((s) -> {
            //Add all values
            appointmentPatientJCombo.addItem(s);
            medicinePatientJCombo.addItem(s);
            appointDeletePatJCombo.addItem(s);
        });
    }
    
    /**
     * Register button handler for delete appointment button.
     * @param controller to respond to event.
     */
    
    /**
     * Get index of the appointment requested.
     * @return index of appointment.
     */
    public String getAppointmentRequest(){
    	int row = appointmentRequestsTable.getSelectedRow();
    	return appointmentRequestsTable.getModel().getValueAt(row, 0).toString();
    }
    
    public String getAppointmentToDelete(){
    	int row = deleteAppointmentsTable.getSelectedRow();
        return deleteAppointmentsTable.getModel().getValueAt(row, 0).toString();
    }
    
    public String getAppointDeletePatId() {
    	String patientId = appointDeletePatJCombo.getSelectedItem().toString().substring(0,5);
    	return patientId;
    }
    
    /**
     * Return selected appointment date from JSpinner.
     * @return date selected.
     */
    public LocalDate getAppointmentDate(){
        try{      	
        	Date date = (Date)appointmentDateJSpinner.getValue();
            LocalDate returnDate = date.toInstant()
                                    .atZone(ZoneId.systemDefault())
                                    .toLocalDate();
            
            returnDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            return returnDate;
               	
            
        } catch(ClassCastException ex){
            displayMessage("Couldn't get appointment date");            
            return null;
        }
    }
    /**
     * Get selected time for appointment.
     * @return appointment time requested.
     */
    public LocalTime getAppointmentTime(){
    	LocalTime time = LocalTime.parse(appointmentTimeJCombo.getSelectedItem().toString());
        return time;
    }
    /**
     * Return the doctor which the appointment is to be booked for.
     * @return selected doctor.
     */
    public String getAppointmentDoctor(){
        return appointmentDoctorJCombo.getSelectedItem().toString().substring(0,5);
    }
    /**
     * Return the patient which the appointment is to be booked for.
     * @return selected patient.
     */
    public String getAppointmentPatient(){
        return appointmentPatientJCombo.getSelectedItem().toString().substring(0,5);
    }
    /**
     * Get index of medicine selected.
     * @return medicine index.
     */
    public Object getSelectedMedName(){
    	int selectedRow = medicinesTable.getSelectedRow();
        return medicinesTable.getValueAt(selectedRow, 0);
    }
    /**
     * Get the medicine that has been prescribed.
     * @return medicines prescribed/
     */
    public String getPrescribedMedicine(){
    	int selectedRow = medicinesTable.getSelectedRow();
        return medicinesTable.getValueAt(selectedRow, 0).toString();//medicinesJList.getSelectedValue();
    }
    /**
     * Fills JTable with available medicines.
     * @param medicines to be set.
     */
    public void setMedicinesTable(String[] colNames, String[][] medicines){
    	DefaultTableModel model = new DefaultTableModel(medicines, colNames);
    	medicinesTable.setModel(model);
    }
    
    /**
     * Get the quantity of the selected medicine to be set.
     * @return medicine quantity.
     */
    public int getMedicineQuantity(){
        try{
            return (int) medicineQuantityJSpinner.getValue();
        }catch(ClassCastException ex){
            displayMessage("Coudln't find medicine quantity");
            return 0;
        }
    }
    /**
     * Get the patientID to give prescribed medicine to.
     * @return 
     */
    public String getPrescriptionPatientID(){
        return medicinePatientJCombo.getSelectedItem().toString().substring(0,5);
    }
    
    public String getPrescriptionDoctorID(){
        return medicineDoctorJCombo.getSelectedItem().toString().substring(0,5);
    }
   
    // Variables declaration - do not modify 
    private JTable medicinesTable;
    private JTable messagesTable;
    private JTable appointmentRequestsTable;
    private JTable deleteAppointmentsTable;
    private JLabel deleteAppointmentJLabel;
    private JComboBox<String> appointDeletePatJCombo;
    private JScrollPane jScrollPane2;
    private javax.swing.JPanel accountJPanel;
    private javax.swing.JLabel appointmentDOctorJLabel;
    private javax.swing.JLabel appointmentDateJLabel;
    private javax.swing.JSpinner appointmentDateJSpinner;
    private javax.swing.JComboBox<String> appointmentDoctorJCombo;
    private javax.swing.JPanel appointmentJPanel;
    private javax.swing.JComboBox<String> appointmentPatientJCombo;
    private javax.swing.JLabel appointmentPatientJLabel;
    private javax.swing.JLabel appointmentRequestJLabel;
    private javax.swing.JComboBox<String> appointmentTimeJCombo;
    private javax.swing.JLabel appointmentTimeJLabel;
    private javax.swing.JButton approveAppointmentJButton;
    private javax.swing.JButton approveCreationJButton;
    private javax.swing.JButton deleteAppointmentButton;
    private javax.swing.JTabbedPane backgroundJTabbedPane;
    private javax.swing.JButton createAppointmentJButton;
    private javax.swing.JList<String> creationJList;
    private javax.swing.JButton declineAppointmentJButton;
    private javax.swing.JButton declineCreationJButton;
    private javax.swing.JButton deleteMedicineJButton;
    private javax.swing.JButton deleteMessageJButton;
    private javax.swing.JLabel detailsJLabel;
    private javax.swing.JButton giveMedicineJButton;
    private javax.swing.JPanel homeJPanel;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JLabel medicinePatientIDJLabel;
    private javax.swing.JComboBox<String> medicinePatientJCombo;
    private javax.swing.JLabel medicineQuantityJLabel;
    private javax.swing.JSpinner medicineQuantityJSpinner;
    private javax.swing.JLabel medicinesJLabel;
    private javax.swing.JPanel medicinesJPanel;
    private javax.swing.JLabel messagesJLabel;
    private javax.swing.JButton orderJButton;
    private javax.swing.JButton removeAccountJButton;
    private javax.swing.JComboBox<String> removePatientJCombo;
    private javax.swing.JLabel removePatientJLabel;
    private javax.swing.JLabel requesedAccountJLabel;
    private javax.swing.JLabel setAppointmentJLabel;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JTextArea userInfoJText;
    private javax.swing.JLabel welcomeJLabel;
    private JComboBox<String> medicineDoctorJCombo;
}