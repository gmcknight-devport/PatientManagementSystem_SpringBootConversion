/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gmck.PatientManagementSystem.Views;

import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;

/**
 *
 * @author Glenn McKnight
 */
public class DoctorView extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1128660140892790553L;
	/**
     * Creates new form DoctorView
     */
    public DoctorView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        titleJLabel = new javax.swing.JLabel();
        logoutJButton = new javax.swing.JButton();
        backgroundJTabbedPane = new javax.swing.JTabbedPane();
        homeJPanel = new javax.swing.JPanel();
        welcomeJLabel = new javax.swing.JLabel();
        userInfoJText = new javax.swing.JTextArea();
        detailsJLabel = new javax.swing.JLabel();
        messagesJLabel = new javax.swing.JLabel();
        deleteMessageJButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        messagesTable = new javax.swing.JTable();
        appointmentsJPanel = new javax.swing.JPanel();
        setAppointmentJLabel = new javax.swing.JLabel();
        appointmentDateJLabel = new javax.swing.JLabel();
        appointmentDateJSpinner = new javax.swing.JSpinner();
        appointmentTimeJLabel = new javax.swing.JLabel();
        appointmentTimeJCombo = new javax.swing.JComboBox<>();
        appointmentPatientJLabel = new javax.swing.JLabel();
        appointmentPatientJCombo = new javax.swing.JComboBox<>();
        createAppointmentJButton = new javax.swing.JButton();
        currentAppointmentsJLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        appointmentsTable = new javax.swing.JTable();
        patientJPanel = new javax.swing.JPanel();
        patientJLabel = new javax.swing.JLabel();
        patientHistoryJCombo = new javax.swing.JComboBox<>();
        patientHistoryJabel = new javax.swing.JLabel();
        prescritionHistoryJLabel = new javax.swing.JLabel();
        addNotesJLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        addNotesJText = new javax.swing.JTextArea();
        addNotesJButton = new javax.swing.JButton();
        jscrollPane10 = new javax.swing.JScrollPane();
        patientHistoryJList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        prescriptionHistoryJList = new javax.swing.JList<>();
        medicinesJPanel = new javax.swing.JPanel();
        medicinesJLabel = new javax.swing.JLabel();
        medicinePatientIDJLabel = new javax.swing.JLabel();
        medicinePatientJCombo = new javax.swing.JComboBox<>();
        prescribeMedicineJButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        medicineTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        medNamJLabel = new javax.swing.JLabel();
        medicineDosageJLabel = new javax.swing.JLabel();
        medNameJText = new javax.swing.JTextField();
        dosageJText = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        commonUsesJText = new javax.swing.JTextArea();
        commonUsesJLabel = new javax.swing.JLabel();
        createJButton = new javax.swing.JButton();
        createMedicineJLabel = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(680, 490));

        titleJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleJLabel.setText("Indisposed Clinic");

        logoutJButton.setText("Log Out");

        welcomeJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        welcomeJLabel.setText("Welcome Back!");

        userInfoJText.setEditable(false);
        userInfoJText.setColumns(20);
        userInfoJText.setRows(5);
        userInfoJText.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        detailsJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        detailsJLabel.setText("Your details:");

        messagesJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        messagesJLabel.setText("Messages");

        deleteMessageJButton.setText("Delete Message");

        messagesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(messagesTable);

        javax.swing.GroupLayout homeJPanelLayout = new javax.swing.GroupLayout(homeJPanel);
        homeJPanel.setLayout(homeJPanelLayout);
        homeJPanelLayout.setHorizontalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(welcomeJLabel)
                    .addGroup(homeJPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(messagesJLabel)
                            .addComponent(detailsJLabel)
                            .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(deleteMessageJButton)
                                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane8)
                                    .addComponent(userInfoJText, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE))))))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        homeJPanelLayout.setVerticalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeJLabel)
                .addGap(31, 31, 31)
                .addComponent(detailsJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userInfoJText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagesJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteMessageJButton)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Home", homeJPanel);

        setAppointmentJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        setAppointmentJLabel.setText("Appointment Setting");

        appointmentDateJLabel.setText("Appointment date:");

        appointmentDateJSpinner.setModel(new javax.swing.SpinnerDateModel());

        appointmentTimeJLabel.setText("Appointment time:");

        appointmentPatientJLabel.setText("Patient:");

        createAppointmentJButton.setText("Create Appointment");

        currentAppointmentsJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        currentAppointmentsJLabel.setText("Appointments");

        appointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(appointmentsTable);

        javax.swing.GroupLayout appointmentsJPanelLayout = new javax.swing.GroupLayout(appointmentsJPanel);
        appointmentsJPanel.setLayout(appointmentsJPanelLayout);
        appointmentsJPanelLayout.setHorizontalGroup(
            appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentsJPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentAppointmentsJLabel)
                    .addGroup(appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(appointmentsJPanelLayout.createSequentialGroup()
                            .addGroup(appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(appointmentDateJLabel)
                                .addComponent(appointmentTimeJLabel)
                                .addComponent(appointmentPatientJLabel))
                            .addGap(41, 41, 41)
                            .addGroup(appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(appointmentDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(appointmentTimeJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(appointmentPatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(27, 27, 27)
                            .addComponent(createAppointmentJButton)))
                    .addComponent(setAppointmentJLabel))
                .addGap(33, 33, 33))
        );
        appointmentsJPanelLayout.setVerticalGroup(
            appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentsJPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(currentAppointmentsJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(setAppointmentJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appointmentDateJLabel)
                    .addComponent(appointmentDateJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appointmentTimeJLabel)
                    .addComponent(appointmentTimeJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(appointmentsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appointmentPatientJLabel)
                    .addComponent(appointmentPatientJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createAppointmentJButton))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Appointments", appointmentsJPanel);

        patientJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        patientJLabel.setText("Patient");

        patientHistoryJabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        patientHistoryJabel.setText("Patient History");

        prescritionHistoryJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        prescritionHistoryJLabel.setText("Prescription History");

        addNotesJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        addNotesJLabel.setText("Add Notes");

        addNotesJText.setColumns(20);
        addNotesJText.setRows(3);
        jScrollPane4.setViewportView(addNotesJText);

        addNotesJButton.setText("Add Notes");

        jscrollPane10.setViewportView(patientHistoryJList);

        jScrollPane2.setViewportView(prescriptionHistoryJList);

        javax.swing.GroupLayout patientJPanelLayout = new javax.swing.GroupLayout(patientJPanel);
        patientJPanel.setLayout(patientJPanelLayout);
        patientJPanelLayout.setHorizontalGroup(
            patientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(patientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addComponent(patientHistoryJCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addNotesJButton))
                    .addComponent(jscrollPane10, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientJPanelLayout.createSequentialGroup()
                        .addGroup(patientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(patientJLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientHistoryJabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addNotesJLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prescritionHistoryJLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        patientJPanelLayout.setVerticalGroup(
            patientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patientJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patientHistoryJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(patientHistoryJabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jscrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prescritionHistoryJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addNotesJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addNotesJButton)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        backgroundJTabbedPane.addTab("Patients", patientJPanel);

        medicinesJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        medicinesJLabel.setText("Medicines");

        medicinePatientIDJLabel.setText("Patient ID");

        prescribeMedicineJButton.setText("Prescribe");
        prescribeMedicineJButton.setActionCommand("");

        medicineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(medicineTable);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        medNamJLabel.setText("Medicine Name:");

        medicineDosageJLabel.setText("Dosage: ");

        commonUsesJText.setColumns(20);
        commonUsesJText.setRows(3);
        jScrollPane5.setViewportView(commonUsesJText);

        commonUsesJLabel.setText("Common Uses:");

        createJButton.setText("Create Medicine");

        createMedicineJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        createMedicineJLabel.setText("New Medicine");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createJButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medNamJLabel)
                            .addComponent(medicineDosageJLabel))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(medNameJText)
                            .addComponent(dosageJText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(commonUsesJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(createMedicineJLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createMedicineJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medNamJLabel)
                            .addComponent(medNameJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(commonUsesJLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medicineDosageJLabel)
                            .addComponent(dosageJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        
        quantitySpinner = new JSpinner();
        
        quantityLabel = new JLabel("Quantity");

        javax.swing.GroupLayout medicinesJPanelLayout = new javax.swing.GroupLayout(medicinesJPanel);
        medicinesJPanelLayout.setHorizontalGroup(
        	medicinesJPanelLayout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(medicinesJPanelLayout.createSequentialGroup()
        			.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addComponent(medicinePatientIDJLabel)
        					.addGap(29)
        					.addComponent(medicinePatientJCombo, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
        					.addComponent(quantityLabel, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
        					.addGap(44)
        					.addComponent(quantitySpinner, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
        					.addGap(55)
        					.addComponent(prescribeMedicineJButton, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addComponent(medicinesJLabel)
        					.addGap(0, 601, Short.MAX_VALUE))
        				.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
        				.addComponent(jScrollPane7, GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE))
        			.addContainerGap())
        );
        medicinesJPanelLayout.setVerticalGroup(
        	medicinesJPanelLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(medicinesJPanelLayout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(medicinesJLabel)
        			.addGap(13)
        			.addComponent(jScrollPane7, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
        			.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addGap(19)
        					.addGroup(medicinesJPanelLayout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(prescribeMedicineJButton)
        						.addComponent(medicinePatientIDJLabel)
        						.addComponent(medicinePatientJCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(quantityLabel)))
        				.addGroup(medicinesJPanelLayout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(quantitySpinner, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)))
        			.addGap(18)
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(67, Short.MAX_VALUE))
        );
        medicinesJPanel.setLayout(medicinesJPanelLayout);

        backgroundJTabbedPane.addTab("Medicines", medicinesJPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleJLabel)
                .addGap(161, 161, 161)
                .addComponent(logoutJButton)
                .addContainerGap())
            .addComponent(backgroundJTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logoutJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backgroundJTabbedPane))
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorView().setVisible(true);
            }
        });
    }
    /**
     * Displays a JOptionPane to provide information to the user when required. 
     * @param message to be displayed.
     */
    public void displayMessage(String message){
        JOptionPane.showMessageDialog(this, message);
    }
    /**
     * Set the data in the patient JCombos. 
     * @param patientIDs list of patIDs to be displayed.
     */    
    public void setPatientCombos(List<String> patientIDs){
        patientIDs.forEach((s) -> {
            appointmentPatientJCombo.addItem(s);
            medicinePatientJCombo.addItem(s);
            patientHistoryJCombo.addItem(s);
        });
    }         
    ///////////////////////////////////////////////////////////////////////////
    //Home page
    /**
     * Register button handler to respond to logout button.
     * @param controller to respond to event.
     */
    public void addLogoutButtonHandler(ActionListener controller){
        logoutJButton.addActionListener(controller);
    }
    public void setUserInfoText(String info){
       userInfoJText.setText(info);
   }
  /**
   * Set the messages the user has received to the messageTable.
   * @param messages of user to be displayed.
   */
   public void setUserMessages(String[] colNames, String[][] messages){
  	 DefaultTableModel model = new DefaultTableModel(messages, colNames);
  	 messagesTable.setModel(model);
   }
  /**
   * Register button handler for delete message button.
   * @param controller to respond to event.
   */
   public void addDeleteMessageButtonHandler(ActionListener controller){
       deleteMessageJButton.addActionListener(controller);
   }
  /**
   * Get the index of the selected message to be deleted.
   * @return 
   */
   public String getMessageToDelete(){
       int row = messagesTable.getSelectedRow();
       return messagesTable.getModel().getValueAt(row, 0).toString();
   } 
    ////////////////////////////////////////////////////////////////////////////
    //Appointments page
    /**
     * Sets JTable of appointments booked for user.
     * @param appointments array of appointments.
     */
    public void setAppointmentTable(String[] colNames, String[][] appointments){
    	DefaultTableModel model = new DefaultTableModel(appointments, colNames);
    	appointmentsTable.setModel(model);
    	
    	//Hide ID column - not needed for user but useful to minimise excessive code to
    	//find Appointment records.
    	appointmentsTable.removeColumn(appointmentsTable.getColumn(colNames[0]));
    }
    /**
     * Sets format of date spinner to local date to avoid confusion between 
     * different potential date formats.
     */
    public void setAppointmentDateSpinnerFormat(){
        
        try{
            SimpleDateFormat format;
            format = ((JSpinner.DateEditor) appointmentDateJSpinner.getEditor()).getFormat();
            format.applyPattern("dd/MM/yy");
            appointmentDateJSpinner.commitEdit();
            
        } catch(ParseException ex){
            displayMessage("Appointment booking date format error");
        }
    }
    /**
     * Fills JComboBox with possible appointment times.
     * @param times to be set.
     */
    public void setAppointmentTimeCombo(List<String> times){
        times.forEach((s) -> {
            appointmentTimeJCombo.addItem(s);
        });
    }
    /**
     * Return selected appointment date from JSpinner.
     * @return date selected.
     */
    public LocalDate getAppointmentDate(){
        try{            
            Date date = (Date)appointmentDateJSpinner.getValue();
            LocalDate returnDate = date.toInstant()
                                    .atZone(ZoneId.systemDefault())
                                    .toLocalDate();
            
            returnDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
            return returnDate;
            
        } catch(ClassCastException ex){
            displayMessage("Couldn't get appointment date");            
            return null;
        }
    }
    /**
     * Get selected time for appointment.
     * @return appointment time requested.
     */
    public LocalTime getAppointmentTime(){
    	LocalTime time = LocalTime.parse(appointmentTimeJCombo.getSelectedItem().toString());
        return time;
    }
    /**
     * Return the patient which the appointment is to be booked for.
     * @return selected patient.
     */
    public String getAppointmentPatient(){
        return appointmentPatientJCombo.getSelectedItem().toString();
    }    
    /**
     * Register button hander for appointment creation button.
     * @param controller to respond to event. 
     */
    public void addCreateAppointmentButtonHandler(ActionListener controller){
        createAppointmentJButton.addActionListener(controller);
    }
    ////////////////////////////////////////////////////////////////////////////
    //Patients page
    /**
     * Get the patient selected to display their appointment history. 
     * @return 
     */
    public String getPatientHistoryID(){
        return patientHistoryJCombo.getSelectedItem().toString();
    }
    /**
     * Display the patient history that had been selected by the JCombo Box.
     * @param history to be set for patient.
     */
    public void setPatientHistory(String[] history){
        patientHistoryJList.setListData(history);
    }
    /**
     * Display the patient prescription history that had been selected by the JCombo Box.
     * @param history to be set for patient.
     */
    public void setPrescriptionHistory(String[] history){
        prescriptionHistoryJList.setListData(history);
    }
    /**
     * Get any added notes for the patient.
     * @return notes about patient.
     */
    public String getNotes(){
        return addNotesJText.getText() + 
                LocalDate.now().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT));
    }
    /**
     * Clears text from notes JTextField so more can be made about another patient.
     */
    public void clearNotesJText(){
        addNotesJText.setText("");
    }
    /**
     * Register Button Handler for the patient JComboBox. 
     * @param controller to respond to event.
     */
    public void addPatientJComboListener(ActionListener controller){
        patientHistoryJCombo.addActionListener(controller);
    }
    /**
     * Register button handler for the add notes JButton.
     * @param controller to respond to event.
     */
    public void addNotesButtonHandler(ActionListener controller){
        addNotesJButton.addActionListener(controller);
    }
    ////////////////////////////////////////////////////////////////////////////
    //Medicines page
    /**
   * Fills JTable with available medicines.
   * @param medicines to be set.
   */
   public void setMedicinesTable(String[] colNames, String[][] medicines){
	   DefaultTableModel model = new DefaultTableModel(medicines, colNames);
	   medicineTable.setModel(model);
   }
  
  /**
   * Get the medicine that has been prescribed.
   * @return medicines prescribed/
   */
   public Object getSelectedMedName(){
	   int selectedRow = medicineTable.getSelectedRow();
       return medicineTable.getValueAt(selectedRow, 0);
   }
  /**
   * Get the ID of the patient the medicine is to be prescribed to.
   * @return patient ID to be given medicine.
   */
   public String getMedicinesPatientID(){
	   return medicinePatientJCombo.getSelectedItem().toString();
   }
  
   /**
    * Get the quantity of the selected medicine to be set.
    * @return medicine quantity.
    */
  	public int getMedicineQuantity(){
      	try{
          	return (int) quantitySpinner.getValue();
      	}catch(ClassCastException ex){
          	displayMessage("Coudln't find medicine quantity");
          	return 0;
      	}
  	}
    /**
     * Register Button Handler for add prescription button.
     * @param controller to respond to event.
     */
    public void addPrescribeButtonHandler(ActionListener controller){
        prescribeMedicineJButton.addActionListener(controller);
    }
    /**
     * Get medicine name to be added.
     * @return medicine name.
     */
    public String getMedName(){
        return medNameJText.getText();
    }
    /**
     * Get Medicine dosage to be added.
     * @return medicine dosage.
     */
    public String getMedDosage(){
        return dosageJText.getText();
    }
    /**
     * Get common uses to be added.
     * @return common uses text.
     */
    public String getCommonUses(){
        return commonUsesJText.getText();
    }
    /**
     * Register button handler for create medicine button.
     * @param controller to respond to event.
     */
    public void addCreateMedicineButtonHandler(ActionListener controller){
        createJButton.addActionListener(controller);
    }
    /**
     * Clear all create medicine fields so another one can be created if required.
     */
    public void clearCreateMedicineFields(){
        medNameJText.setText("");
        dosageJText.setText("");
        commonUsesJText.setText("");
    }    
    // Variables declaration - do not modify                     
    private javax.swing.JButton addNotesJButton;
    private javax.swing.JLabel addNotesJLabel;
    private javax.swing.JTextArea addNotesJText;
    private javax.swing.JLabel appointmentDateJLabel;
    private javax.swing.JSpinner appointmentDateJSpinner;
    private javax.swing.JComboBox<String> appointmentPatientJCombo;
    private javax.swing.JLabel appointmentPatientJLabel;
    private javax.swing.JComboBox<String> appointmentTimeJCombo;
    private javax.swing.JLabel appointmentTimeJLabel;
    private javax.swing.JPanel appointmentsJPanel;
    private javax.swing.JTable appointmentsTable;
    private javax.swing.JTabbedPane backgroundJTabbedPane;
    private javax.swing.JLabel commonUsesJLabel;
    private javax.swing.JTextArea commonUsesJText;
    private javax.swing.JButton createAppointmentJButton;
    private javax.swing.JButton createJButton;
    private javax.swing.JLabel createMedicineJLabel;
    private javax.swing.JLabel currentAppointmentsJLabel;
    private javax.swing.JButton deleteMessageJButton;
    private javax.swing.JLabel detailsJLabel;
    private javax.swing.JTextField dosageJText;
    private javax.swing.JPanel homeJPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable medicineTable;
    private javax.swing.JScrollPane jscrollPane10;
    private javax.swing.JButton logoutJButton;
    private javax.swing.JLabel medNamJLabel;
    private javax.swing.JTextField medNameJText;
    private javax.swing.JLabel medicineDosageJLabel;
    private javax.swing.JLabel medicinePatientIDJLabel;
    private javax.swing.JComboBox<String> medicinePatientJCombo;
    private javax.swing.JLabel medicinesJLabel;
    private javax.swing.JPanel medicinesJPanel;
    private javax.swing.JLabel messagesJLabel;
    private javax.swing.JTable messagesTable;
    private javax.swing.JComboBox<String> patientHistoryJCombo;
    private javax.swing.JList<String> patientHistoryJList;
    private javax.swing.JLabel patientHistoryJabel;
    private javax.swing.JLabel patientJLabel;
    private javax.swing.JPanel patientJPanel;
    private javax.swing.JButton prescribeMedicineJButton;
    private javax.swing.JList<String> prescriptionHistoryJList;
    private javax.swing.JLabel prescritionHistoryJLabel;
    private javax.swing.JLabel setAppointmentJLabel;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JTextArea userInfoJText;
    private javax.swing.JLabel welcomeJLabel;
    private JSpinner quantitySpinner;
    private JLabel quantityLabel;
    // End of variables declaration                   
}
